/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BannerHeader = {
  _id: string;
  _type: "bannerHeader";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  isVisible?: boolean;
  title?: string;
  description?: string;
  buttonText?: string;
  buttonLink?: string;
  createdAt?: string;
  updatedAt?: string;
  endDate?: string;
};

export type Timeline = {
  _id: string;
  _type: "timeline";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  description?: string;
  buttonText?: string;
  buttonLink?: string;
  secondaryButtonText?: string;
  secondaryButtonLink?: string;
  showSecondaryButton?: boolean;
  items?: Array<{
    title?: string;
    description?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    _key: string;
  }>;
};

export type UpcomingEventsHeader = {
  _id: string;
  _type: "upcomingEventsHeader";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  badge?: string;
  title?: string;
  description?: string;
};

export type OurStory = {
  _id: string;
  _type: "ourStory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  mainContent?: string;
  secondaryContent?: string;
  workplaceTitle?: string;
  workplaceContent?: string;
  workplaceSecondaryContent?: string;
  images?: {
    image1?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image2?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image3?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image4?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image5?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image6?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  };
};

export type AboutUsCta = {
  _type: "aboutUsCta";
  title?: string;
  ctaBannerImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  subTitle?: string;
};

export type AboutValues = {
  _type: "aboutValues";
  icon?: string;
  title?: string;
  description?: string;
};

export type AboutUsHero = {
  _id: string;
  _type: "aboutUsHero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subTitle?: string;
  bannerImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ourMission?: string;
  secondaryHeading?: string;
  secondarySubHeading?: string;
  ourValues?: Array<{
    _key: string;
  } & AboutValues>;
  aboutUsCtaComponent?: Array<{
    _key: string;
  } & AboutUsCta>;
};

export type Testimonial = {
  _id: string;
  _type: "testimonial";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  quote?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  published?: string;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  summary?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  type?: "webinar" | "bootcamp" | "triumphtalk" | "foundathon" | "openhouse" | "workshop";
  label?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  published?: string;
  href?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type HeroComponent = {
  _id: string;
  _type: "heroComponent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subtitle?: string;
  buttonText?: string;
  buttonLink?: string;
  showButton?: boolean;
  image1?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  image2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  image3?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  image4?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Cta = {
  _id: string;
  _type: "cta";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  primaryButtonText?: string;
  primaryButtonLink?: string;
  secondaryButtonText?: string;
  secondaryButtonLink?: string;
  variant?: boolean;
  activateSecondaryButton?: boolean;
  showCTA?: boolean;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  question?: string;
  answer?: string;
};

export type Feature = {
  _id: string;
  _type: "feature";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  icon?: string;
};

export type JobCategory = {
  _id: string;
  _type: "jobCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  category?: string;
  openings?: Array<{
    title?: string;
    location?: string;
    link?: string;
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BannerHeader | Timeline | UpcomingEventsHeader | OurStory | AboutUsCta | AboutValues | AboutUsHero | Testimonial | Event | HeroComponent | Cta | Faq | Feature | JobCategory | Post | Author | Category | BlockContent | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | MediaTag | Slug | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: ABOUT_HERO_QUERY
// Query: *[_type == "aboutUsHero"][0]{  _id,  _createdAt,  title,  subTitle,  bannerImage,  ourMission,  secondaryHeading,  secondarySubHeading,  ourValues,  aboutUsCtaComponent}
export type ABOUT_HERO_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  subTitle: string | null;
  bannerImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  ourMission: string | null;
  secondaryHeading: string | null;
  secondarySubHeading: string | null;
  ourValues: Array<{
    _key: string;
  } & AboutValues> | null;
  aboutUsCtaComponent: Array<{
    _key: string;
  } & AboutUsCta> | null;
} | null;
// Variable: UPCOMING_HEADER_QUERY
// Query: *[_type == "upcomingEventsHeader"][0]{  _id,  _createdAt,  badge,  title,  description}
export type UPCOMING_HEADER_QUERYResult = {
  _id: string;
  _createdAt: string;
  badge: string | null;
  title: string | null;
  description: string | null;
} | null;
// Variable: CTA_QUERY
// Query: *[_type == "cta"]{  _id,  _createdAt,  title,  description,  primaryButtonText,  primaryButtonLink,  secondaryButtonText,  secondaryButtonLink,  variant,  activateSecondaryButton,  showCTA}
export type CTA_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  primaryButtonText: string | null;
  primaryButtonLink: string | null;
  secondaryButtonText: string | null;
  secondaryButtonLink: string | null;
  variant: boolean | null;
  activateSecondaryButton: boolean | null;
  showCTA: boolean | null;
}>;
// Variable: TESTIMONIALS_QUERY
// Query: *[_type == "testimonial"]{  _id,  _createdAt,  quote,  author->{    name,    title,    slug,    image,    bio  },  published}
export type TESTIMONIALS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  quote: string | null;
  author: {
    name: string | null;
    title: string | null;
    slug: Slug | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | null;
  published: string | null;
}>;
// Variable: JOBS_QUERY
// Query: *[_type == "jobCategory"]{  _id,  _createdAt,  category,  openings[]{    title,    location,    link  }}
export type JOBS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  category: string | null;
  openings: Array<{
    title: string | null;
    location: string | null;
    link: string | null;
  }> | null;
}>;
// Variable: FEATURES_QUERY
// Query: *[_type == "feature"]{  _id,  _createdAt,  title,  description,  icon}
export type FEATURES_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  icon: string | null;
}>;
// Variable: FAQS_QUERY
// Query: *[_type == "faq"]{  _id,  _createdAt,  question,  answer}
export type FAQS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  question: string | null;
  answer: string | null;
}>;
// Variable: EVENTS_QUERY
// Query: *[_type == "event"] | order(published desc)[0...3]{  _id,  _createdAt,  title,  summary,  image,  label,  author->{    name,    title,    slug,    image,    bio  },  published,  href,  "slug": slug.current}
export type EVENTS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  summary: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  label: string | null;
  author: {
    name: string | null;
    title: string | null;
    slug: Slug | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | null;
  published: string | null;
  href: string | null;
  slug: string | null;
}>;
// Variable: ALL_EVENTS_QUERY
// Query: *[_type == "event"] {  _id,  _createdAt,  title,  summary,  image,  type,  label,  author->{    name,    title,    slug,    image,    bio  },  published,  href,  "slug": slug.current}
export type ALL_EVENTS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  summary: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  type: "bootcamp" | "foundathon" | "openhouse" | "triumphtalk" | "webinar" | "workshop" | null;
  label: string | null;
  author: {
    name: string | null;
    title: string | null;
    slug: Slug | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    bio: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | null;
  published: string | null;
  href: string | null;
  slug: string | null;
}>;
// Variable: EVENT_BY_SLUG_QUERY
// Query: *[_type == "event" && slug.current == $slug][0] {  _id,  _createdAt,  title,  summary,  content,  image,  type,  label,  author->{    name,    title,    image  },  published,  href,  "slug": slug.current}
export type EVENT_BY_SLUG_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  summary: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  type: "bootcamp" | "foundathon" | "openhouse" | "triumphtalk" | "webinar" | "workshop" | null;
  label: string | null;
  author: {
    name: string | null;
    title: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  published: string | null;
  href: string | null;
  slug: string | null;
} | null;
// Variable: HERO_QUERY
// Query: *[_type == "heroComponent"][0]{    _id,    _createdAt,    title,    subtitle,    buttonText,    buttonLink,    showButton,    image1,    image2,    image3,    image4}
export type HERO_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  subtitle: string | null;
  buttonText: string | null;
  buttonLink: string | null;
  showButton: boolean | null;
  image1: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  image2: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  image3: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  image4: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
} | null;
// Variable: OUR_STORY_QUERY
// Query: *[_type == "ourStory"][0]{  _id,  _createdAt,  title,  mainContent,  secondaryContent,  workplaceTitle,  workplaceContent,  workplaceSecondaryContent,  images}
export type OUR_STORY_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  mainContent: string | null;
  secondaryContent: string | null;
  workplaceTitle: string | null;
  workplaceContent: string | null;
  workplaceSecondaryContent: string | null;
  images: {
    image1?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image2?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image3?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image4?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image5?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    image6?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
  } | null;
} | null;
// Variable: TIMELINE_QUERY
// Query: *[_type == "timeline"][0]{  _id,  _createdAt,  title,  subtitle,  description,  buttonText,  buttonLink,  secondaryButtonText,  secondaryButtonLink,  showSecondaryButton,  items[]{    title,    description,    image  }}
export type TIMELINE_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  subtitle: string | null;
  description: string | null;
  buttonText: string | null;
  buttonLink: string | null;
  secondaryButtonText: string | null;
  secondaryButtonLink: string | null;
  showSecondaryButton: boolean | null;
  items: Array<{
    title: string | null;
    description: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  }> | null;
} | null;

// Source: ./src/sanity/lib/queries/ctaQuery.ts
// Variable: ctaQuery
// Query: *[_type == "cta"]{    _id,    _createdAt,    title,    description,    primaryButtonText,    primaryButtonLink,    secondaryButtonText,    secondaryButtonLink,    variant,    activateSecondaryButton,    showCTA}
export type CtaQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  primaryButtonText: string | null;
  primaryButtonLink: string | null;
  secondaryButtonText: string | null;
  secondaryButtonLink: string | null;
  variant: boolean | null;
  activateSecondaryButton: boolean | null;
  showCTA: boolean | null;
}>;

// Source: ./src/sanity/lib/queries/eventsQuery.ts
// Variable: eventsQuery
// Query: *[_type == "event"]{    _id,    _createdAt,    id,    title,    summary,    image,    label,    author,    published,    href}
export type EventsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  id: null;
  title: string | null;
  summary: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  label: string | null;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  } | null;
  published: string | null;
  href: string | null;
}>;

// Source: ./src/sanity/lib/queries/faqsQuery.ts
// Variable: faqsQuery
// Query: *[_type == "faq"]{    _id,    _createdAt,    question,    answer}
export type FaqsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  question: string | null;
  answer: string | null;
}>;

// Source: ./src/sanity/lib/queries/featuresQuery.ts
// Variable: featuresQuery
// Query: *[_type == "feature"]{    _id,    _createdAt,    title,    description,    icon}
export type FeaturesQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  icon: string | null;
}>;

// Source: ./src/sanity/lib/queries/jobsQuery.ts
// Variable: jobsQuery
// Query: *[_type == "jobCategory"]{    _id,    _createdAt,    category,    openings[]{      title,      location,      link    }}
export type JobsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  category: string | null;
  openings: Array<{
    title: string | null;
    location: string | null;
    link: string | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"aboutUsHero\"][0]{\n  _id,\n  _createdAt,\n  title,\n  subTitle,\n  bannerImage,\n  ourMission,\n  secondaryHeading,\n  secondarySubHeading,\n  ourValues,\n  aboutUsCtaComponent\n}": ABOUT_HERO_QUERYResult;
    "*[_type == \"upcomingEventsHeader\"][0]{\n  _id,\n  _createdAt,\n  badge,\n  title,\n  description\n}": UPCOMING_HEADER_QUERYResult;
    "*[_type == \"cta\"]{\n  _id,\n  _createdAt,\n  title,\n  description,\n  primaryButtonText,\n  primaryButtonLink,\n  secondaryButtonText,\n  secondaryButtonLink,\n  variant,\n  activateSecondaryButton,\n  showCTA\n}": CTA_QUERYResult;
    "*[_type == \"testimonial\"]{\n  _id,\n  _createdAt,\n  quote,\n  author->{\n    name,\n    title,\n    slug,\n    image,\n    bio\n  },\n  published\n}": TESTIMONIALS_QUERYResult;
    "*[_type == \"jobCategory\"]{\n  _id,\n  _createdAt,\n  category,\n  openings[]{\n    title,\n    location,\n    link\n  }\n}": JOBS_QUERYResult;
    "*[_type == \"feature\"]{\n  _id,\n  _createdAt,\n  title,\n  description,\n  icon\n}": FEATURES_QUERYResult;
    "*[_type == \"faq\"]{\n  _id,\n  _createdAt,\n  question,\n  answer\n}": FAQS_QUERYResult;
    "*[_type == \"event\"] | order(published desc)[0...3]{\n  _id,\n  _createdAt,\n  title,\n  summary,\n  image,\n  label,\n  author->{\n    name,\n    title,\n    slug,\n    image,\n    bio\n  },\n  published,\n  href,\n  \"slug\": slug.current\n}": EVENTS_QUERYResult;
    "*[_type == \"event\"] {\n  _id,\n  _createdAt,\n  title,\n  summary,\n  image,\n  type,\n  label,\n  author->{\n    name,\n    title,\n    slug,\n    image,\n    bio\n  },\n  published,\n  href,\n  \"slug\": slug.current\n}": ALL_EVENTS_QUERYResult;
    "*[_type == \"event\" && slug.current == $slug][0] {\n  _id,\n  _createdAt,\n  title,\n  summary,\n  content,\n  image,\n  type,\n  label,\n  author->{\n    name,\n    title,\n    image\n  },\n  published,\n  href,\n  \"slug\": slug.current\n}": EVENT_BY_SLUG_QUERYResult;
    "*[_type == \"heroComponent\"][0]{\n    _id,\n    _createdAt,\n    title,\n    subtitle,\n    buttonText,\n    buttonLink,\n    showButton,\n    image1,\n    image2,\n    image3,\n    image4\n}": HERO_QUERYResult;
    "*[_type == \"ourStory\"][0]{\n  _id,\n  _createdAt,\n  title,\n  mainContent,\n  secondaryContent,\n  workplaceTitle,\n  workplaceContent,\n  workplaceSecondaryContent,\n  images\n}": OUR_STORY_QUERYResult;
    "*[_type == \"timeline\"][0]{\n  _id,\n  _createdAt,\n  title,\n  subtitle,\n  description,\n  buttonText,\n  buttonLink,\n  secondaryButtonText,\n  secondaryButtonLink,\n  showSecondaryButton,\n  items[]{\n    title,\n    description,\n    image\n  }\n}": TIMELINE_QUERYResult;
    "*[_type == \"cta\"]{\n    _id,\n    _createdAt,\n    title,\n    description,\n    primaryButtonText,\n    primaryButtonLink,\n    secondaryButtonText,\n    secondaryButtonLink,\n    variant,\n    activateSecondaryButton,\n    showCTA\n}": CtaQueryResult;
    "*[_type == \"event\"]{\n    _id,\n    _createdAt,\n    id,\n    title,\n    summary,\n    image,\n    label,\n    author,\n    published,\n    href\n}": EventsQueryResult;
    "*[_type == \"faq\"]{\n    _id,\n    _createdAt,\n    question,\n    answer\n}": FaqsQueryResult;
    "*[_type == \"feature\"]{\n    _id,\n    _createdAt,\n    title,\n    description,\n    icon\n}": FeaturesQueryResult;
    "*[_type == \"jobCategory\"]{\n    _id,\n    _createdAt,\n    category,\n    openings[]{\n      title,\n      location,\n      link\n    }\n}": JobsQueryResult;
  }
}
